"use strict";(self.webpackChunkotai_documentation=self.webpackChunkotai_documentation||[]).push([[278],{7465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"features/plugin/tools/index","title":"\u2699\ufe0f Tools","description":"What are Tools?","source":"@site/docs/features/plugin/tools/index.mdx","sourceDirName":"features/plugin/tools","slug":"/features/plugin/tools/","permalink":"/open-tutor-ai-docs/docs/features/plugin/tools/","draft":false,"unlisted":false,"editUrl":"https://github.com/pr-elhajji/open-tutor-ai-CE/docs/features/plugin/tools/index.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"\u2699\ufe0f Tools"},"sidebar":"tutorialSidebar","previous":{"title":"Common","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/tab-shared/Common"},"next":{"title":"\ud83d\ude9a Migrating Tools & Functions: 0.4 to 0.5","permalink":"/open-tutor-ai-docs/docs/features/plugin/migration/"}}');var o=n(4848),i=n(8453);const a={sidebar_position:2,title:"\u2699\ufe0f Tools"},l=void 0,r={},c=[{value:"What are Tools?",id:"what-are-tools",level:2},{value:"How can I use Tools?",id:"how-can-i-use-tools",level:2},{value:"How to install Tools",id:"how-to-install-tools",level:2},{value:"Download and import manually",id:"download-and-import-manually",level:3},{value:"Import via your Open TutorAI URL",id:"import-via-your-open-tutorai-url",level:3},{value:"What sorts of things can Tools do?",id:"what-sorts-of-things-can-tools-do",level:2},{value:"Writing A Custom Toolkit",id:"writing-a-custom-toolkit",level:2},{value:"Example Top-Level Docstring",id:"example-top-level-docstring",level:3},{value:"Tools Class",id:"tools-class",level:3},{value:"Type Hints",id:"type-hints",level:3},{value:"Valves and UserValves - (optional, but HIGHLY encouraged)",id:"valves-and-uservalves---optional-but-highly-encouraged",level:3},{value:"Optional Arguments",id:"optional-arguments",level:3},{value:"Event Emitters",id:"event-emitters",level:3},{value:"Status",id:"status",level:4},{value:"Message",id:"message",level:4},{value:"Citations",id:"citations",level:4},{value:"External packages",id:"external-packages",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"what-are-tools",children:"What are Tools?"}),"\n",(0,o.jsx)(t.p,{children:"Tools are python scripts that are provided to an LLM at the time of the request. Tools allow LLMs to perform actions and receive additional context as a result. Generally speaking, your LLM of choice will need to support function calling for tools to be reliably utilized."}),"\n",(0,o.jsx)(t.p,{children:"Tools enable many use cases for chats, including web search, web scraping, and API interactions within the chat."}),"\n",(0,o.jsxs)(t.p,{children:["Many Tools are available to use on the ",(0,o.jsx)(t.a,{href:"https://openwebui.com/tools",children:"Community Website"})," and can easily be imported into your Open TutorAI instance."]}),"\n",(0,o.jsx)(t.h2,{id:"how-can-i-use-tools",children:"How can I use Tools?"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"#how-to-install-tools",children:"Once installed"}),", Tools can be used by assigning them to any LLM that supports function calling and then enabling that Tool. To assign a Tool to a model, you need to navigate to Workspace => Models. Here you can select the model for which you\u2019d like to enable any Tools."]}),"\n",(0,o.jsx)(t.p,{children:"Once you click the pencil icon to edit the model settings, scroll down to the Tools section and check any Tools you wish to enable. Once done you must click save."}),"\n",(0,o.jsx)(t.p,{children:"Now that Tools are enabled for the model, you can click the \u201c+\u201d icon when chatting with an LLM to use various Tools. Please keep in mind that enabling a Tool does not force it to be used. It means the LLM will be provided the option to call this Tool."}),"\n",(0,o.jsxs)(t.p,{children:["Lastly, we do provide a filter function on the community site that allows LLMs to autoselect Tools without you needing to enable them in the \u201c+\u201d icon menu: ",(0,o.jsx)(t.a,{href:"https://openwebui.com/f/hub/autotool_filter/",children:"https://openwebui.com/f/hub/autotool_filter/"})]}),"\n",(0,o.jsx)(t.p,{children:"Please note: when using the AutoTool Filter, you will still need to take the steps above to enable the Tools per model."}),"\n",(0,o.jsx)(t.h2,{id:"how-to-install-tools",children:"How to install Tools"}),"\n",(0,o.jsx)(t.p,{children:"The Tools import process is quite simple. You will have two options:"}),"\n",(0,o.jsx)(t.h3,{id:"download-and-import-manually",children:"Download and import manually"}),"\n",(0,o.jsxs)(t.p,{children:["Navigate to the community site: ",(0,o.jsx)(t.a,{href:"https://openwebui.com/tools/",children:"https://openwebui.com/tools/"})]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Click on the Tool you wish to import"}),"\n",(0,o.jsx)(t.li,{children:"Click the blue \u201cGet\u201d button in the top right-hand corner of the page"}),"\n",(0,o.jsx)(t.li,{children:"Click \u201cDownload as JSON export\u201d"}),"\n",(0,o.jsx)(t.li,{children:"You can now upload the Tool into Open TutorAI by navigating to Workspace => Tools and clicking \u201cImport Tools\u201d"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"import-via-your-open-tutorai-url",children:"Import via your Open TutorAI URL"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Navigate to the community site: ",(0,o.jsx)(t.a,{href:"https://openwebui.com/tools/",children:"https://openwebui.com/tools/"})]}),"\n",(0,o.jsx)(t.li,{children:"Click on the Tool you wish to import"}),"\n",(0,o.jsx)(t.li,{children:"Click the blue \u201cGet\u201d button in the top right-hand corner of the page"}),"\n",(0,o.jsx)(t.li,{children:"Enter the IP address of your Open TutorAI instance and click \u201cImport to TutorAI\u201d which will automatically open your instance and allow you to import the Tool."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Note: You can install your own Tools and other Tools not tracked on the community site using the manual import method. Please do not import Tools you do not understand or are not from a trustworthy source. Running unknown code is ALWAYS a risk."}),"\n",(0,o.jsx)(t.h2,{id:"what-sorts-of-things-can-tools-do",children:"What sorts of things can Tools do?"}),"\n",(0,o.jsx)(t.p,{children:"Tools enable diverse use cases for interactive conversations by providing a wide range of functionality such as:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://openwebui.com/t/constliakos/web_search/",children:(0,o.jsx)(t.strong,{children:"Web Search"})}),": Perform live web searches to fetch real-time information."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://openwebui.com/t/justinrahb/image_gen/",children:(0,o.jsx)(t.strong,{children:"Image Generation"})}),": Generate images based on the user prompt"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"https://openwebui.com/t/justinrahb/elevenlabs_tts/",children:(0,o.jsx)(t.strong,{children:"External Voice Synthesis"})}),": Make API requests within the chat to integrate external voice synthesis service ElevenLabs and generate audio based on the LLM output."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"writing-a-custom-toolkit",children:"Writing A Custom Toolkit"}),"\n",(0,o.jsxs)(t.p,{children:["Toolkits are defined in a single Python file, with a top level docstring with metadata and a ",(0,o.jsx)(t.code,{children:"Tools"})," class."]}),"\n",(0,o.jsx)(t.h3,{id:"example-top-level-docstring",children:"Example Top-Level Docstring"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'"""\ntitle: String Inverse\nauthor: Your Name\nauthor_url: https://website.com\ngit_url: https://github.com/username/string-reverse.git\ndescription: This tool calculates the inverse of a string\nrequired_open_webui_version: 0.4.0\nrequirements: langchain-openai, langgraph, ollama, langchain_ollama\nversion: 0.4.0\nlicence: MIT\n"""\n'})}),"\n",(0,o.jsx)(t.h3,{id:"tools-class",children:"Tools Class"}),"\n",(0,o.jsxs)(t.p,{children:["Tools have to be defined as methods within a class called ",(0,o.jsx)(t.code,{children:"Tools"}),", with optional subclasses called ",(0,o.jsx)(t.code,{children:"Valves"})," and ",(0,o.jsx)(t.code,{children:"UserValves"}),", for example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'class Tools:\n    def __init__(self):\n        """Initialize the Tool."""\n        self.valves = self.Valves()\n\n    class Valves(BaseModel):\n        api_key: str = Field("", description="Your API key here")\n\n    def reverse_string(self, string: str) -> str:\n        """\n        Reverses the input string.\n        :param string: The string to reverse\n        """\n        # example usage of valves\n        if self.valves.api_key != "42":\n            return "Wrong API key"\n        return string[::-1] \n'})}),"\n",(0,o.jsx)(t.h3,{id:"type-hints",children:"Type Hints"}),"\n",(0,o.jsxs)(t.p,{children:["Each tool must have type hints for arguments. As of version OpenTutorAI version 0.4.3, the types may also be nested, such as ",(0,o.jsx)(t.code,{children:"queries_and_docs: list[tuple[str, int]]"}),". Those type hints are used to generate the JSON schema that is sent to the model. Tools without type hints will work with a lot less consistency."]}),"\n",(0,o.jsx)(t.h3,{id:"valves-and-uservalves---optional-but-highly-encouraged",children:"Valves and UserValves - (optional, but HIGHLY encouraged)"}),"\n",(0,o.jsx)(t.p,{children:"Valves and UserValves are used to allow users to provide dynamic details such as an API key or a configuration option. These will create a fillable field or a bool switch in the GUI menu for the given Tool."}),"\n",(0,o.jsx)(t.p,{children:"Valves are configurable by admins alone and UserValves are configurable by any users."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'# Define and Valves\n    class Valves(BaseModel):\n        priority: int = Field(\n            default=0, description="Priority level for the filter operations."\n        )\n        test_valve: int = Field(\n            default=4, description="A valve controlling a numerical value"\n        )\n        pass\n\n    # Define any UserValves\n    class UserValves(BaseModel):\n        test_user_valve: bool = Field(\n            default=False, description="A user valve controlling a True/False (on/off) switch"\n        )\n        pass\n\n    def __init__(self):\n        self.valves = self.Valves()\n'})})]}),"\n",(0,o.jsx)(t.h3,{id:"optional-arguments",children:"Optional Arguments"}),"\n",(0,o.jsx)(t.p,{children:"Below is a list of optional arguments your tools can depend on:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__event_emitter__"}),": Emit events (see following section)"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__event_call__"}),": Same as event emitter but can be used for user interactions"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__user__"}),": A dictionary with user information"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__metadata__"}),": Dictionary with chat metadata"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__messages__"}),": List of previous messages"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__files__"}),": Attached files"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"__model__"}),": Model name"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"event-emitters",children:"Event Emitters"}),"\n",(0,o.jsx)(t.p,{children:"Event Emitters are used to add additional information to the chat interface. Similarly to Filter Outlets, Event Emitters are capable of appending content to the chat. Unlike Filter Outlets, they are not capable of stripping information. Additionally, emitters can be activated at any stage during the Tool."}),"\n",(0,o.jsx)(t.p,{children:"There are two different types of Event Emitters:"}),"\n",(0,o.jsx)(t.h4,{id:"status",children:"Status"}),"\n",(0,o.jsx)(t.p,{children:"This is used to add statuses to a message while it is performing steps. These can be done at any stage during the Tool. These statuses appear right above the message content. These are very useful for Tools that delay the LLM response or process large amounts of information. This allows you to inform users what is being processed in real-time."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'await __event_emitter__(\n            {\n                "type": "status", # We set the type here\n                "data": {"description": "Message that shows up in the chat", "done": False, "hidden": False}, \n                # Note done is False here indicating we are still emitting statuses\n            }\n        )\n'})}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'async def test_function(\n        self, prompt: str, __user__: dict, __event_emitter__=None\n    ) -> str:\n        """\n        This is a demo\n\n        :param test: this is a test parameter\n        """\n\n        await __event_emitter__(\n            {\n                "type": "status", # We set the type here\n                "data": {"description": "Message that shows up in the chat", "done": False}, \n                # Note done is False here indicating we are still emitting statuses\n            }\n        )\n\n        # Do some other logic here\n        await __event_emitter__(\n            {\n                "type": "status",\n                "data": {"description": "Completed a task message", "done": True, "hidden": False},\n                # Note done is True here indicating we are done emitting statuses\n                # You can also set "hidden": True if you want to remove the status once the message is returned\n            }\n        )\n\n        except Exception as e:\n            await __event_emitter__(\n                {\n                    "type": "status",\n                    "data": {"description": f"An error occured: {e}", "done": True},\n                }\n            )\n\n            return f"Tell the user: {e}"\n'})})]}),"\n",(0,o.jsx)(t.h4,{id:"message",children:"Message"}),"\n",(0,o.jsx)(t.p,{children:"This type is used to append a message to the LLM at any stage in the Tool. This means that you can append messages, embed images, and even render web pages before, or after, or during the LLM response."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'await __event_emitter__(\n                    {\n                        "type": "message", # We set the type here\n                        "data": {"content": "This message will be appended to the chat."},\n                        # Note that with message types we do NOT have to set a done condition\n                    }\n                )\n'})}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'async def test_function(\n        self, prompt: str, __user__: dict, __event_emitter__=None\n    ) -> str:\n        """\n        This is a demo\n\n        :param test: this is a test parameter\n        """\n\n        await __event_emitter__(\n                    {\n                        "type": "message", # We set the type here\n                        "data": {"content": "This message will be appended to the chat."},\n                        # Note that with message types we do NOT have to set a done condition\n                    }\n                )\n\n        except Exception as e:\n            await __event_emitter__(\n                {\n                    "type": "status",\n                    "data": {"description": f"An error occured: {e}", "done": True},\n                }\n            )\n\n            return f"Tell the user: {e}"\n'})})]}),"\n",(0,o.jsx)(t.h4,{id:"citations",children:"Citations"}),"\n",(0,o.jsx)(t.p,{children:"This type is used to provide citations or references in the chat. You can utilize it to specify the content, the source, and any relevant metadata. Below is an example of how to emit a citation event:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'await __event_emitter__(\n    {\n        "type": "citation",\n        "data": {\n            "document": [content],\n            "metadata": [\n                {\n                    "date_accessed": datetime.now().isoformat(),\n                    "source": title,\n                }\n            ],\n            "source": {"name": title, "url": url},\n        },\n    }\n)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["If you are sending multiple citations, you can iterate over citations and call the emitter multiple times. When implementing custom citations, ensure that you set ",(0,o.jsx)(t.code,{children:"self.citation = False"})," in your ",(0,o.jsx)(t.code,{children:"Tools"})," class ",(0,o.jsx)(t.code,{children:"__init__"})," method. Otherwise, the built-in citations will override the ones you have pushed in. For example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def __init__(self):\n    self.citation = False\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Warning: if you set ",(0,o.jsx)(t.code,{children:"self.citation = True"}),", this will replace any custom citations you send with the automatically generated return citation. By disabling it, you can fully manage your own citation references."]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'class Tools:\n    class UserValves(BaseModel):\n        test: bool = Field(\n            default=True, description="test"\n        )\n\n    def __init__(self):\n        self.citation = False\n\nasync def test_function(\n        self, prompt: str, __user__: dict, __event_emitter__=None\n    ) -> str:\n        """\n        This is a demo that just creates a citation\n\n        :param test: this is a test parameter\n        """\n\n        await __event_emitter__(\n            {\n                "type": "citation",\n                "data": {\n                    "document": ["This message will be appended to the chat as a citation when clicked into"],\n                    "metadata": [\n                        {\n                            "date_accessed": datetime.now().isoformat(),\n                            "source": title,\n                        }\n                    ],\n                    "source": {"name": "Title of the content", "url": "http://link-to-citation"},\n                },\n            }\n        )\n'})})]}),"\n",(0,o.jsx)(t.h2,{id:"external-packages",children:"External packages"}),"\n",(0,o.jsxs)(t.p,{children:["In the Tools definition metadata you can specify custom packages. When you click ",(0,o.jsx)(t.code,{children:"Save"})," the line will be parsed and ",(0,o.jsx)(t.code,{children:"pip install"})," will be run on all requirements at once."]}),"\n",(0,o.jsx)(t.p,{children:"Keep in mind that as pip is used in the same process as Open-TutorAI, the UI will be completely unresponsive during the installation."}),"\n",(0,o.jsxs)(t.p,{children:["No measures are taken to handle package conflicts with Open-TutorAI's requirements. That means that specifying requirements can break OpenTutorAI if you're not careful. You might be able to work around this by specifying ",(0,o.jsx)(t.code,{children:"open-webui"})," itself as a requirement."]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'"""\ntitle: myToolName\nauthor: myName\nfunding_url: [any link here will be shown behind a `Heart` button for users to show their support to you]\nversion: 1.0.0\n# the version is displayed in the UI to help users keep track of updates.\nlicense: GPLv3\ndescription: [recommended]\nrequirements: package1>=2.7.0,package2,package3\n"""\n'})})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);