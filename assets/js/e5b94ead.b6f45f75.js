"use strict";(self.webpackChunkotai_documentation=self.webpackChunkotai_documentation||[]).push([[3216],{49:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"features/plugin/functions/filter","title":"\ud83e\ude84 Filter Function","description":"Welcome to the comprehensive guide on Filter Functions in Open TutorAI! Filters are a flexible and powerful plugin system for modifying data before it\'s sent to the Large Language Model (LLM) (input) or after it\u2019s returned from the LLM (output). Whether you\u2019re transforming inputs for better context or cleaning up outputs for improved readability, Filter Functions let you do it all.","source":"@site/docs/features/plugin/functions/filter.mdx","sourceDirName":"features/plugin/functions","slug":"/features/plugin/functions/filter","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/filter","draft":false,"unlisted":false,"editUrl":"https://github.com/pr-elhajji/open-tutor-ai-CE/docs/features/plugin/functions/filter.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"\ud83e\ude84 Filter Function"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udeb0 Pipe Function","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/pipe"},"next":{"title":"\ud83c\udfac Action Function","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/action"}}');var i=t(4848),r=t(8453);const o={sidebar_position:2,title:"\ud83e\ude84 Filter Function"},l="\ud83e\ude84 Filter Function: Modify Inputs and Outputs",a={},d=[{value:"\ud83c\udf0a What Are Filters in Open TutorAI?",id:"-what-are-filters-in-open-tutorai",level:2},{value:"\ud83d\uddfa\ufe0f Structure of a Filter Function: The Skeleton",id:"\ufe0f-structure-of-a-filter-function-the-skeleton",level:2},{value:"\ud83e\uddb4 Basic Skeleton of a Filter",id:"-basic-skeleton-of-a-filter",level:3},{value:"\ud83c\udfaf Key Components Explained",id:"-key-components-explained",level:3},{value:"1\ufe0f\u20e3 <strong><code>Valves</code> Class (Optional Settings)</strong>",id:"1\ufe0f\u20e3-valves-class-optional-settings",level:4},{value:"2\ufe0f\u20e3 <strong><code>inlet</code> Function (Input Pre-Processing)</strong>",id:"2\ufe0f\u20e3-inlet-function-input-pre-processing",level:4},{value:"\ud83c\udf73 Why Would You Use the <code>inlet</code>?",id:"-why-would-you-use-the-inlet",level:5},{value:"\ud83d\udca1 Example Use Cases: Build on Food Prep",id:"-example-use-cases-build-on-food-prep",level:5},{value:"\ud83e\udd57 Example 1: Adding System Context",id:"-example-1-adding-system-context",level:6},{value:"\ud83d\udd2a Example 2: Cleaning Input (Remove Odd Characters)",id:"-example-2-cleaning-input-remove-odd-characters",level:6},{value:"\ud83d\udcca How <code>inlet</code> Helps Optimize Input for the LLM:",id:"-how-inlet-helps-optimize-input-for-the-llm",level:5},{value:"\ud83c\udd95 3\ufe0f\u20e3 <strong><code>stream</code> Hook (New in Open TutorAI 0.5.17)</strong>",id:"-3\ufe0f\u20e3-stream-hook-new-in-open-tutorai-0517",level:4},{value:"\ud83d\udd04 What is the <code>stream</code> Hook?",id:"-what-is-the-stream-hook",level:5},{value:"\ud83d\udee0\ufe0f When to Use the Stream Hook?",id:"\ufe0f-when-to-use-the-stream-hook",level:5},{value:"\ud83d\udcdc Example: Logging Streaming Chunks",id:"-example-logging-streaming-chunks",level:5},{value:"\ud83d\udd04 Example: Filtering Out Emojis from Streamed Data",id:"-example-filtering-out-emojis-from-streamed-data",level:5},{value:"4\ufe0f\u20e3 <strong><code>outlet</code> Function (Output Post-Processing)</strong>",id:"4\ufe0f\u20e3-outlet-function-output-post-processing",level:4},{value:"\ud83c\udf1f Filters in Action: Building Practical Examples",id:"-filters-in-action-building-practical-examples",level:2},{value:"\ud83d\udcda Example #1: Add Context to Every User Input",id:"-example-1-add-context-to-every-user-input",level:3},{value:"\ud83d\udcda Example #2: Highlight Outputs for Easy Reading",id:"-example-2-highlight-outputs-for-easy-reading",level:3},{value:"\ud83d\udea7 Potential Confusion: Clear FAQ \ud83d\uded1",id:"-potential-confusion-clear-faq-",level:2},{value:"<strong>Q: How Are Filters Different From Pipe Functions?</strong>",id:"q-how-are-filters-different-from-pipe-functions",level:3},{value:"<strong>Q: Can I Do Heavy Post-Processing Inside <code>outlet</code>?</strong>",id:"q-can-i-do-heavy-post-processing-inside-outlet",level:3},{value:"\ud83c\udf89 Recap: Why Build Filter Functions?",id:"-recap-why-build-filter-functions",level:2}];function c(e){const n={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-filter-function-modify-inputs-and-outputs",children:"\ud83e\ude84 Filter Function: Modify Inputs and Outputs"})}),"\n",(0,i.jsxs)(n.p,{children:["Welcome to the comprehensive guide on Filter Functions in Open TutorAI! Filters are a flexible and powerful ",(0,i.jsx)(n.strong,{children:"plugin system"})," for modifying data ",(0,i.jsx)(n.em,{children:"before it's sent to the Large Language Model (LLM)"})," (input) or ",(0,i.jsx)(n.em,{children:"after it\u2019s returned from the LLM"})," (output). Whether you\u2019re transforming inputs for better context or cleaning up outputs for improved readability, ",(0,i.jsx)(n.strong,{children:"Filter Functions"})," let you do it all."]}),"\n",(0,i.jsxs)(n.p,{children:["This guide will break down ",(0,i.jsx)(n.strong,{children:"what Filters are"}),", how they work, their structure, and everything you need to know to build powerful and user-friendly filters of your own. Let\u2019s dig in, and don\u2019t worry\u2014I\u2019ll use metaphors, examples, and tips to make everything crystal clear! \ud83c\udf1f"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-what-are-filters-in-open-tutorai",children:"\ud83c\udf0a What Are Filters in Open TutorAI?"}),"\n",(0,i.jsxs)(n.p,{children:["Imagine Open TutorAI as a ",(0,i.jsx)(n.strong,{children:"stream of water"})," flowing through pipes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User inputs"})," and ",(0,i.jsx)(n.strong,{children:"LLM outputs"})," are the water."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filters"})," are the ",(0,i.jsx)(n.strong,{children:"water treatment stages"})," that clean, modify, and adapt the water before it reaches the final destination."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Filters sit in the middle of the flow\u2014like checkpoints\u2014where you decide what needs to be adjusted."}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s a quick summary of what Filters do:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modify User Inputs (Inlet Function)"}),": Tweak the input data before it reaches the AI model. This is where you enhance clarity, add context, sanitize text, or reformat messages to match specific requirements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intercept Model Outputs (Stream Function)"}),": Capture and adjust the AI\u2019s responses ",(0,i.jsx)(n.strong,{children:"as they\u2019re generated"})," by the model. This is useful for real-time modifications, like filtering out sensitive information or formatting the output for better readability."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modify Model Outputs (Outlet Function)"}),": Adjust the AI's response ",(0,i.jsx)(n.strong,{children:"after it\u2019s processed"}),", before showing it to the user. This can help refine, log, or adapt the data for a cleaner user experience."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Concept:"})," Filters are not standalone models but tools that enhance or transform the data traveling ",(0,i.jsx)(n.em,{children:"to"})," and ",(0,i.jsx)(n.em,{children:"from"})," models."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Filters are like ",(0,i.jsx)(n.strong,{children:"translators or editors"})," in the AI workflow: you can intercept and change the conversation without interrupting the flow."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-structure-of-a-filter-function-the-skeleton",children:"\ud83d\uddfa\ufe0f Structure of a Filter Function: The Skeleton"}),"\n",(0,i.jsx)(n.p,{children:"Let's start with the simplest representation of a Filter Function. Don't worry if some parts feel technical at first\u2014we\u2019ll break it all down step by step!"}),"\n",(0,i.jsx)(n.h3,{id:"-basic-skeleton-of-a-filter",children:"\ud83e\uddb4 Basic Skeleton of a Filter"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel\nfrom typing import Optional\n\nclass Filter:\n    # Valves: Configuration options for the filter\n    class Valves(BaseModel):  \n        pass\n\n    def __init__(self):\n        # Initialize valves (optional configuration for the Filter)\n        self.valves = self.Valves()\n\n    def inlet(self, body: dict) -> dict:\n        # This is where you manipulate user inputs.\n        print(f"inlet called: {body}")\n        return body  \n\n    def stream(self, event: dict) -> dict:\n        # This is where you modify streamed chunks of model output.\n        print(f"stream event: {event}")\n        return event\n\n    def outlet(self, body: dict) -> None:\n        # This is where you manipulate model outputs.\n        print(f"outlet called: {body}")\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-key-components-explained",children:"\ud83c\udfaf Key Components Explained"}),"\n",(0,i.jsxs)(n.h4,{id:"1\ufe0f\u20e3-valves-class-optional-settings",children:["1\ufe0f\u20e3 ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"Valves"})," Class (Optional Settings)"]})]}),"\n",(0,i.jsxs)(n.p,{children:["Think of ",(0,i.jsx)(n.strong,{children:"Valves"})," as the knobs and sliders for your filter. If you want to give users configurable options to adjust your Filter\u2019s behavior, you define those here."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Valves(BaseModel):\n    OPTION_NAME: str = "Default Value"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For example:",(0,i.jsx)(n.br,{}),"\n","If you're creating a filter that converts responses into uppercase, you might allow users to configure whether every output gets totally capitalized via a valve like ",(0,i.jsx)(n.code,{children:"TRANSFORM_UPPERCASE: bool = True/False"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"2\ufe0f\u20e3-inlet-function-input-pre-processing",children:["2\ufe0f\u20e3 ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"inlet"})," Function (Input Pre-Processing)"]})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"inlet"})," function is like ",(0,i.jsx)(n.strong,{children:"prepping food before cooking"}),". Imagine you\u2019re a chef: before the ingredients go into the recipe (the LLM in this case), you might wash vegetables, chop onions, or season the meat. Without this step, your final dish could lack flavor, have unwashed produce, or simply be inconsistent."]}),"\n",(0,i.jsxs)(n.p,{children:["In the world of Open TutorAI, the ",(0,i.jsx)(n.code,{children:"inlet"})," function does this important prep work on the ",(0,i.jsx)(n.strong,{children:"user input"})," before it\u2019s sent to the model. It ensures the input is as clean, contextual, and helpful as possible for the AI to handle."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udce5 ",(0,i.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"body"})}),": The raw input from Open TutorAI to the model. It is in the format of a chat-completion request (usually a dictionary that includes fields like the conversation's messages, model settings, and other metadata). Think of this as your recipe ingredients."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Your Task"}),":",(0,i.jsx)(n.br,{}),"\n","Modify and return the ",(0,i.jsx)(n.code,{children:"body"}),". The modified version of the ",(0,i.jsx)(n.code,{children:"body"})," is what the LLM works with, so this is your chance to bring clarity, structure, and context to the input."]}),"\n",(0,i.jsxs)(n.h5,{id:"-why-would-you-use-the-inlet",children:["\ud83c\udf73 Why Would You Use the ",(0,i.jsx)(n.code,{children:"inlet"}),"?"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Adding Context"}),': Automatically append crucial information to the user\u2019s input, especially if their text is vague or incomplete. For example, you might add "You are a friendly assistant" or "Help this user troubleshoot a software bug."']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Formatting Data"}),": If the input requires a specific format, like JSON or Markdown, you can transform it before sending it to the model."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sanitizing Input"}),": Remove unwanted characters, strip potentially harmful or confusing symbols (like excessive whitespace or emojis), or replace sensitive information."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Streamlining User Input"}),": If your model\u2019s output improves with additional guidance, you can use the ",(0,i.jsx)(n.code,{children:"inlet"})," to inject clarifying instructions automatically!"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"-example-use-cases-build-on-food-prep",children:"\ud83d\udca1 Example Use Cases: Build on Food Prep"}),"\n",(0,i.jsx)(n.h6,{id:"-example-1-adding-system-context",children:"\ud83e\udd57 Example 1: Adding System Context"}),"\n",(0,i.jsx)(n.p,{children:'Let\u2019s say the LLM is a chef preparing a dish for Italian cuisine, but the user hasn\u2019t mentioned "This is for Italian cooking." You can ensure the message is clear by appending this context before sending the data to the model.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def inlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n    # Add system message for Italian context in the conversation\n    context_message = {\n        "role": "system",\n        "content": "You are helping the user prepare an Italian meal."\n    }\n    # Insert the context at the beginning of the chat history\n    body.setdefault("messages", []).insert(0, context_message)\n    return body\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"What Happens?"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Any user input like "What are some good dinner ideas?" now carries the Italian theme because we\u2019ve set the system context! Cheesecake might not show up as an answer, but pasta sure will.'}),"\n"]}),"\n",(0,i.jsx)(n.h6,{id:"-example-2-cleaning-input-remove-odd-characters",children:"\ud83d\udd2a Example 2: Cleaning Input (Remove Odd Characters)"}),"\n",(0,i.jsxs)(n.p,{children:["Suppose the input from the user looks messy or includes unwanted symbols like ",(0,i.jsx)(n.code,{children:"!!!"}),", making the conversation inefficient or harder for the model to parse. You can clean it up while preserving the core content."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def inlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n    # Clean the last user input (from the end of the \'messages\' list)\n    last_message = body["messages"][-1]["content"]\n    body["messages"][-1]["content"] = last_message.replace("!!!", "").strip()\n    return body\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"What Happens?"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Before: ",(0,i.jsx)(n.code,{children:'"How can I debug this issue!!!"'})," \u27a1\ufe0f Sent to the model as ",(0,i.jsx)(n.code,{children:'"How can I debug this issue"'})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note: The user feels the same, but the model processes a cleaner and easier-to-understand query."}),"\n",(0,i.jsxs)(n.h5,{id:"-how-inlet-helps-optimize-input-for-the-llm",children:["\ud83d\udcca How ",(0,i.jsx)(n.code,{children:"inlet"})," Helps Optimize Input for the LLM:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Improves ",(0,i.jsx)(n.strong,{children:"accuracy"})," by clarifying ambiguous queries."]}),"\n",(0,i.jsxs)(n.li,{children:["Makes the AI ",(0,i.jsx)(n.strong,{children:"more efficient"})," by removing unnecessary noise like emojis, HTML tags, or extra punctuation."]}),"\n",(0,i.jsxs)(n.li,{children:["Ensures ",(0,i.jsx)(n.strong,{children:"consistency"})," by formatting user input to match the model\u2019s expected patterns or schemas (like, say, JSON for a specific use case)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcad ",(0,i.jsxs)(n.strong,{children:["Think of ",(0,i.jsx)(n.code,{children:"inlet"})," as the sous-chef in your kitchen"]}),'\u2014ensuring everything that goes into the model (your AI "recipe") has been prepped, cleaned, and seasoned to perfection. The better the input, the better the output!']}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"-3\ufe0f\u20e3-stream-hook-new-in-open-tutorai-0517",children:["\ud83c\udd95 3\ufe0f\u20e3 ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"stream"})," Hook (New in Open TutorAI 0.5.17)"]})]}),"\n",(0,i.jsxs)(n.h5,{id:"-what-is-the-stream-hook",children:["\ud83d\udd04 What is the ",(0,i.jsx)(n.code,{children:"stream"})," Hook?"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"stream"})," function"]})," is a new feature introduced in Open TutorAI ",(0,i.jsx)(n.strong,{children:"0.5.17"})," that allows you to ",(0,i.jsx)(n.strong,{children:"intercept and modify streamed model responses"})," in real time."]}),"\n",(0,i.jsxs)(n.p,{children:["Unlike ",(0,i.jsx)(n.code,{children:"outlet"}),", which processes an entire completed response, ",(0,i.jsx)(n.code,{children:"stream"})," operates on ",(0,i.jsx)(n.strong,{children:"individual chunks"})," as they are received from the model."]}),"\n",(0,i.jsx)(n.h5,{id:"\ufe0f-when-to-use-the-stream-hook",children:"\ud83d\udee0\ufe0f When to Use the Stream Hook?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Modify ",(0,i.jsx)(n.strong,{children:"streaming responses"})," before they are displayed to users."]}),"\n",(0,i.jsxs)(n.li,{children:["Implement ",(0,i.jsx)(n.strong,{children:"real-time censorship or cleanup"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor streamed data"})," for logging/debugging."]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"-example-logging-streaming-chunks",children:"\ud83d\udcdc Example: Logging Streaming Chunks"}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s how you can inspect and modify streamed LLM responses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def stream(self, event: dict) -> dict:\n    print(event)  # Print each incoming chunk for inspection\n    return event\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Streamed Events:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{'id': 'chatcmpl-B4l99MMaP3QLGU5uV7BaBM0eDS0jb','choices': [{'delta': {'content': 'Hi'}}]}\n{'id': 'chatcmpl-B4l99MMaP3QLGU5uV7BaBM0eDS0jb','choices': [{'delta': {'content': '!'}}]}\n{'id': 'chatcmpl-B4l99MMaP3QLGU5uV7BaBM0eDS0jb','choices': [{'delta': {'content': ' \ud83d\ude0a'}}]}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"What Happens?"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each line represents a ",(0,i.jsx)(n.strong,{children:"small fragment"})," of the model's streamed response."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"delta.content"})," field"]})," contains the progressively generated text."]}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"-example-filtering-out-emojis-from-streamed-data",children:"\ud83d\udd04 Example: Filtering Out Emojis from Streamed Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def stream(self, event: dict) -> dict:\n    for choice in event.get("choices", []):\n        delta = choice.get("delta", {})\n        if "content" in delta:\n            delta["content"] = delta["content"].replace("\ud83d\ude0a", "")  # Strip emojis\n    return event\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"Before:"})," ",(0,i.jsx)(n.code,{children:'"Hi \ud83d\ude0a"'}),(0,i.jsx)(n.br,{}),"\n","\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"After:"})," ",(0,i.jsx)(n.code,{children:'"Hi"'})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"4\ufe0f\u20e3-outlet-function-output-post-processing",children:["4\ufe0f\u20e3 ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"outlet"})," Function (Output Post-Processing)"]})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"outlet"})," function is like a ",(0,i.jsx)(n.strong,{children:"proofreader"}),": tidy up the AI's response (or make final changes) ",(0,i.jsx)(n.em,{children:"after it\u2019s processed by the LLM."})]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udce4 ",(0,i.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"body"})}),": This contains ",(0,i.jsx)(n.strong,{children:"all current messages"})," in the chat (user history + LLM replies)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Your Task"}),": Modify this ",(0,i.jsx)(n.code,{children:"body"}),". You can clean, append, or log changes, but be mindful of how each adjustment impacts the user experience."]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,i.jsx)(n.strong,{children:"Best Practices"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prefer logging over direct edits in the outlet (e.g., for debugging or analytics)."}),"\n",(0,i.jsxs)(n.li,{children:["If heavy modifications are needed (like formatting outputs), consider using the ",(0,i.jsx)(n.strong,{children:"pipe function"})," instead."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,i.jsx)(n.strong,{children:"Example Use Case"}),": Strip out sensitive API responses you don't want the user to see:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def outlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n    for message in body["messages"]:\n        message["content"] = message["content"].replace("<API_KEY>", "[REDACTED]")\n    return body \n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-filters-in-action-building-practical-examples",children:"\ud83c\udf1f Filters in Action: Building Practical Examples"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s build some real-world examples to see how you\u2019d use Filters!"}),"\n",(0,i.jsx)(n.h3,{id:"-example-1-add-context-to-every-user-input",children:"\ud83d\udcda Example #1: Add Context to Every User Input"}),"\n",(0,i.jsxs)(n.p,{children:["Want the LLM to always know it's assisting a customer in troubleshooting software bugs? You can add instructions like ",(0,i.jsx)(n.strong,{children:'"You\'re a software troubleshooting assistant"'})," to every user query."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Filter:\n    def inlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n        context_message = {\n            "role": "system", \n            "content": "You\'re a software troubleshooting assistant."\n        }\n        body.setdefault("messages", []).insert(0, context_message)\n        return body\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-example-2-highlight-outputs-for-easy-reading",children:"\ud83d\udcda Example #2: Highlight Outputs for Easy Reading"}),"\n",(0,i.jsxs)(n.p,{children:["Returning output in Markdown or another formatted style? Use the ",(0,i.jsx)(n.code,{children:"outlet"})," function!"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Filter:\n    def outlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n        # Add "highlight" markdown for every response\n        for message in body["messages"]:\n            if message["role"] == "assistant":  # Target model response\n                message["content"] = f"**{message[\'content\']}**"  # Highlight with Markdown\n        return body\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-potential-confusion-clear-faq-",children:"\ud83d\udea7 Potential Confusion: Clear FAQ \ud83d\uded1"}),"\n",(0,i.jsx)(n.h3,{id:"q-how-are-filters-different-from-pipe-functions",children:(0,i.jsx)(n.strong,{children:"Q: How Are Filters Different From Pipe Functions?"})}),"\n",(0,i.jsxs)(n.p,{children:["Filters modify data ",(0,i.jsx)(n.strong,{children:"going to"})," and ",(0,i.jsx)(n.strong,{children:"coming from models"})," but do not significantly interact with logic outside of these phases. Pipes, on the other hand:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can integrate ",(0,i.jsx)(n.strong,{children:"external APIs"})," or significantly transform how the backend handles operations."]}),"\n",(0,i.jsx)(n.li,{children:'Expose custom logic as entirely new "models."'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"q-can-i-do-heavy-post-processing-inside-outlet",children:(0,i.jsxs)(n.strong,{children:["Q: Can I Do Heavy Post-Processing Inside ",(0,i.jsx)(n.code,{children:"outlet"}),"?"]})}),"\n",(0,i.jsxs)(n.p,{children:["You can, but ",(0,i.jsx)(n.strong,{children:"it\u2019s not the best practice."}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filters"})," are designed to make lightweight changes or apply logging."]}),"\n",(0,i.jsxs)(n.li,{children:["If heavy modifications are required, consider a ",(0,i.jsx)(n.strong,{children:"Pipe Function"})," instead."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-recap-why-build-filter-functions",children:"\ud83c\udf89 Recap: Why Build Filter Functions?"}),"\n",(0,i.jsx)(n.p,{children:"By now, you\u2019ve learned:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inlet"})," manipulates ",(0,i.jsx)(n.strong,{children:"user inputs"})," (pre-processing)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stream"})," intercepts and modifies ",(0,i.jsx)(n.strong,{children:"streamed model outputs"})," (real-time)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Outlet"})," tweaks ",(0,i.jsx)(n.strong,{children:"AI outputs"})," (post-processing)."]}),"\n",(0,i.jsx)(n.li,{children:"Filters are best for lightweight, real-time alterations to the data flow."}),"\n",(0,i.jsxs)(n.li,{children:["With ",(0,i.jsx)(n.strong,{children:"Valves"}),", you empower users to configure Filters dynamically for tailored behavior."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Your Turn"}),": Start experimenting! What small tweak or context addition could elevate your Open TutorAI experience? Filters are fun to build, flexible to use, and can take your models to the next level!"]}),"\n",(0,i.jsx)(n.p,{children:"Happy coding! \u2728"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);