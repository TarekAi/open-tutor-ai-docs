"use strict";(self.webpackChunkotai_documentation=self.webpackChunkotai_documentation||[]).push([[8172],{6890:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"features/plugin/functions/pipe","title":"\ud83d\udeb0 Pipe Function","description":"Welcome to this guide on creating Pipes in Open TutorAI! Think of Pipes as a way to adding a new model to Open TutorAI. In this document, we\'ll break down what a Pipe is, how it works, and how you can create your own to add custom logic and processing to your Open TutorAI models. We\'ll use clear metaphors and go through every detail to ensure you have a comprehensive understanding.","source":"@site/docs/features/plugin/functions/pipe.mdx","sourceDirName":"features/plugin/functions","slug":"/features/plugin/functions/pipe","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/pipe","draft":false,"unlisted":false,"editUrl":"https://github.com/pr-elhajji/open-tutor-ai-CE/docs/features/plugin/functions/pipe.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"\ud83d\udeb0 Pipe Function"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\uddf0 Functions","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/"},"next":{"title":"\ud83e\ude84 Filter Function","permalink":"/open-tutor-ai-docs/docs/features/plugin/functions/filter"}}');var t=i(4848),r=i(8453);const o={sidebar_position:1,title:"\ud83d\udeb0 Pipe Function"},l='\ud83d\udeb0 Pipe Function: Create Custom "Agents/Models"',d={},a=[{value:"Introduction to Pipes",id:"introduction-to-pipes",level:2},{value:"Understanding the Pipe Structure",id:"understanding-the-pipe-structure",level:2},{value:"The Pipe Class",id:"the-pipe-class",level:3},{value:"Valves: Configuring Your Pipe",id:"valves-configuring-your-pipe",level:3},{value:"The <code>__init__</code> Method",id:"the-__init__-method",level:3},{value:"The <code>pipe</code> Function",id:"the-pipe-function",level:3},{value:"Creating Multiple Models with Pipes",id:"creating-multiple-models-with-pipes",level:2},{value:"Explanation",id:"explanation",level:3},{value:"Example: OpenAI Proxy Pipe",id:"example-openai-proxy-pipe",level:2},{value:"Detailed Breakdown",id:"detailed-breakdown",level:3},{value:"Valves Configuration",id:"valves-configuration",level:4},{value:"The <code>pipes</code> Function",id:"the-pipes-function",level:4},{value:"The <code>pipe</code> Function",id:"the-pipe-function-1",level:4},{value:"Extending the Proxy Pipe",id:"extending-the-proxy-pipe",level:3},{value:"Using Internal Open TutorAI Functions",id:"using-internal-open-tutorai-functions",level:2},{value:"Explanation",id:"explanation-1",level:3},{value:"Important Notes",id:"important-notes",level:3},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"Q1: Why should I use Pipes in Open TutorAI?",id:"q1-why-should-i-use-pipes-in-open-tutorai",level:3},{value:"Q2: What are Valves, and why are they important?",id:"q2-what-are-valves-and-why-are-they-important",level:3},{value:"Q3: Can I create a Pipe without Valves?",id:"q3-can-i-create-a-pipe-without-valves",level:3},{value:"Q4: How do I ensure my Pipe is secure when using API keys?",id:"q4-how-do-i-ensure-my-pipe-is-secure-when-using-api-keys",level:3},{value:"Q5: What is the difference between the <code>pipe</code> and <code>pipes</code> functions?",id:"q5-what-is-the-difference-between-the-pipe-and-pipes-functions",level:3},{value:"Q6: How can I handle errors in my Pipe?",id:"q6-how-can-i-handle-errors-in-my-pipe",level:3},{value:"Q7: Can I use external libraries in my Pipe?",id:"q7-can-i-use-external-libraries-in-my-pipe",level:3},{value:"Q8: How do I test my Pipe?",id:"q8-how-do-i-test-my-pipe",level:3},{value:"Q9: Are there any best practices for organizing my Pipe&#39;s code?",id:"q9-are-there-any-best-practices-for-organizing-my-pipes-code",level:3},{value:"Q10: Where can I find the latest Open TutorAI documentation?",id:"q10-where-can-i-find-the-latest-open-tutorai-documentation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-pipe-function-create-custom-agentsmodels",children:'\ud83d\udeb0 Pipe Function: Create Custom "Agents/Models"'})}),"\n",(0,t.jsxs)(n.p,{children:["Welcome to this guide on creating ",(0,t.jsx)(n.strong,{children:"Pipes"})," in Open TutorAI! Think of Pipes as a way to ",(0,t.jsx)(n.strong,{children:"adding"})," a new model to Open TutorAI. In this document, we'll break down what a Pipe is, how it works, and how you can create your own to add custom logic and processing to your Open TutorAI models. We'll use clear metaphors and go through every detail to ensure you have a comprehensive understanding."]}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-pipes",children:"Introduction to Pipes"}),"\n",(0,t.jsxs)(n.p,{children:["Imagine Open TutorAI as a ",(0,t.jsx)(n.strong,{children:"plumbing system"})," where data flows through pipes and valves. In this analogy:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pipes"})," are like ",(0,t.jsx)(n.strong,{children:"plugins"})," that let you introduce new pathways for data to flow, allowing you to inject custom logic and processing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Valves"})," are the ",(0,t.jsx)(n.strong,{children:"configurable parts"})," of your pipe that control how data flows through it."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By creating a Pipe, you're essentially crafting a custom model with the specific behavior you want, all within the Open TutorAI framework."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"understanding-the-pipe-structure",children:"Understanding the Pipe Structure"}),"\n",(0,t.jsx)(n.p,{children:"Let's start with a basic, barebones version of a Pipe to understand its structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, Field\n\nclass Pipe:\n    class Valves(BaseModel):\n        MODEL_ID: str = Field(default="")\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    def pipe(self, body: dict):\n        # Logic goes here\n        print(self.valves, body)  # This will print the configuration options and the input body\n        return "Hello, World!"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"the-pipe-class",children:"The Pipe Class"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": The ",(0,t.jsx)(n.code,{children:"Pipe"})," class is where you define your custom logic."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Acts as the blueprint for your plugin, determining how it behaves within Open TutorAI."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"valves-configuring-your-pipe",children:"Valves: Configuring Your Pipe"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": ",(0,t.jsx)(n.code,{children:"Valves"})," is a nested class within ",(0,t.jsx)(n.code,{children:"Pipe"}),", inheriting from ",(0,t.jsx)(n.code,{children:"BaseModel"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": It contains the configuration options (parameters) that persist across the use of your Pipe."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example"}),": In the above code, ",(0,t.jsx)(n.code,{children:"MODEL_ID"})," is a configuration option with a default empty string."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Metaphor"}),": Think of Valves as the knobs on a real-world pipe system that control the flow of water. In your Pipe, Valves allow users to adjust settings that influence how the data flows and is processed."]}),"\n",(0,t.jsxs)(n.h3,{id:"the-__init__-method",children:["The ",(0,t.jsx)(n.code,{children:"__init__"})," Method"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": The constructor method for the ",(0,t.jsx)(n.code,{children:"Pipe"})," class."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Initializes the Pipe's state and sets up any necessary components."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Best Practice"}),": Keep it simple; primarily initialize ",(0,t.jsx)(n.code,{children:"self.valves"})," here."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(self):\n    self.valves = self.Valves()\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"the-pipe-function",children:["The ",(0,t.jsx)(n.code,{children:"pipe"})," Function"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": The core function where your custom logic resides."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"body"}),": A dictionary containing the input data."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Processes the input data using your custom logic and returns the result."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def pipe(self, body: dict):\n    # Logic goes here\n    print(self.valves, body)  # This will print the configuration options and the input body\n    return "Hello, World!"\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": Always place ",(0,t.jsx)(n.code,{children:"Valves"})," at the top of your ",(0,t.jsx)(n.code,{children:"Pipe"})," class, followed by ",(0,t.jsx)(n.code,{children:"__init__"}),", and then the ",(0,t.jsx)(n.code,{children:"pipe"})," function. This structure ensures clarity and consistency."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"creating-multiple-models-with-pipes",children:"Creating Multiple Models with Pipes"}),"\n",(0,t.jsxs)(n.p,{children:["What if you want your Pipe to create ",(0,t.jsx)(n.strong,{children:"multiple models"})," within Open TutorAI? You can achieve this by defining a ",(0,t.jsx)(n.code,{children:"pipes"})," function or variable inside your ",(0,t.jsx)(n.code,{children:"Pipe"})," class. This setup, informally called a ",(0,t.jsx)(n.strong,{children:"manifold"}),", allows your Pipe to represent multiple models."]}),"\n",(0,t.jsx)(n.p,{children:"Here's how you can do it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, Field\n\nclass Pipe:\n    class Valves(BaseModel):\n        MODEL_ID: str = Field(default="")\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    def pipes(self):\n        return [\n            {"id": "model_id_1", "name": "model_1"},\n            {"id": "model_id_2", "name": "model_2"},\n            {"id": "model_id_3", "name": "model_3"},\n        ]\n\n    def pipe(self, body: dict):\n        # Logic goes here\n        print(self.valves, body)  # Prints the configuration options and the input body\n        model = body.get("model", "")\n        return f"{model}: Hello, World!"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"pipes"})," Function"]}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a list of dictionaries."}),"\n",(0,t.jsxs)(n.li,{children:["Each dictionary represents a model with unique ",(0,t.jsx)(n.code,{children:"id"})," and ",(0,t.jsx)(n.code,{children:"name"})," keys."]}),"\n",(0,t.jsx)(n.li,{children:"These models will show up individually in the Open TutorAI model selector."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Updated ",(0,t.jsx)(n.code,{children:"pipe"})," Function"]}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Processes input based on the selected model."}),"\n",(0,t.jsx)(n.li,{children:"In this example, it includes the model name in the returned string."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"example-openai-proxy-pipe",children:"Example: OpenAI Proxy Pipe"}),"\n",(0,t.jsx)(n.p,{children:"Let's dive into a practical example where we'll create a Pipe that proxies requests to the OpenAI API. This Pipe will fetch available models from OpenAI and allow users to interact with them through Open TutorAI."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, Field\nimport requests\n\nclass Pipe:\n    class Valves(BaseModel):\n        NAME_PREFIX: str = Field(\n            default="OPENAI/",\n            description="Prefix to be added before model names.",\n        )\n        OPENAI_API_BASE_URL: str = Field(\n            default="https://api.openai.com/v1",\n            description="Base URL for accessing OpenAI API endpoints.",\n        )\n        OPENAI_API_KEY: str = Field(\n            default="",\n            description="API key for authenticating requests to the OpenAI API.",\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    def pipes(self):\n        if self.valves.OPENAI_API_KEY:\n            try:\n                headers = {\n                    "Authorization": f"Bearer {self.valves.OPENAI_API_KEY}",\n                    "Content-Type": "application/json",\n                }\n\n                r = requests.get(\n                    f"{self.valves.OPENAI_API_BASE_URL}/models", headers=headers\n                )\n                models = r.json()\n                return [\n                    {\n                        "id": model["id"],\n                        "name": f\'{self.valves.NAME_PREFIX}{model.get("name", model["id"])}\',\n                    }\n                    for model in models["data"]\n                    if "gpt" in model["id"]\n                ]\n\n            except Exception as e:\n                return [\n                    {\n                        "id": "error",\n                        "name": "Error fetching models. Please check your API Key.",\n                    },\n                ]\n        else:\n            return [\n                {\n                    "id": "error",\n                    "name": "API Key not provided.",\n                },\n            ]\n\n    def pipe(self, body: dict, __user__: dict):\n        print(f"pipe:{__name__}")\n        headers = {\n            "Authorization": f"Bearer {self.valves.OPENAI_API_KEY}",\n            "Content-Type": "application/json",\n        }\n\n        # Extract model id from the model name\n        model_id = body["model"][body["model"].find(".") + 1 :]\n\n        # Update the model id in the body\n        payload = {**body, "model": model_id}\n        try:\n            r = requests.post(\n                url=f"{self.valves.OPENAI_API_BASE_URL}/chat/completions",\n                json=payload,\n                headers=headers,\n                stream=True,\n            )\n\n            r.raise_for_status()\n\n            if body.get("stream", False):\n                return r.iter_lines()\n            else:\n                return r.json()\n        except Exception as e:\n            return f"Error: {e}"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"detailed-breakdown",children:"Detailed Breakdown"}),"\n",(0,t.jsx)(n.h4,{id:"valves-configuration",children:"Valves Configuration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"NAME_PREFIX"})}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adds a prefix to the model names displayed in Open TutorAI."}),"\n",(0,t.jsxs)(n.li,{children:["Default: ",(0,t.jsx)(n.code,{children:'"OPENAI/"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"OPENAI_API_BASE_URL"})}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Specifies the base URL for the OpenAI API."}),"\n",(0,t.jsxs)(n.li,{children:["Default: ",(0,t.jsx)(n.code,{children:'"https://api.openai.com/v1"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"OPENAI_API_KEY"})}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Your OpenAI API key for authentication."}),"\n",(0,t.jsxs)(n.li,{children:["Default: ",(0,t.jsx)(n.code,{children:'""'})," (empty string; must be provided)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"the-pipes-function",children:["The ",(0,t.jsx)(n.code,{children:"pipes"})," Function"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Fetches available OpenAI models and makes them accessible in Open TutorAI."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Process"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check for API Key"}),": Ensures that an API key is provided."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fetch Models"}),": Makes a GET request to the OpenAI API to retrieve available models."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Filter Models"}),": Returns models that have ",(0,t.jsx)(n.code,{children:'"gpt"'})," in their ",(0,t.jsx)(n.code,{children:"id"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": If there's an issue, returns an error message."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return Format"}),": A list of dictionaries with ",(0,t.jsx)(n.code,{children:"id"})," and ",(0,t.jsx)(n.code,{children:"name"})," for each model."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"the-pipe-function-1",children:["The ",(0,t.jsx)(n.code,{children:"pipe"})," Function"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Handles the request to the selected OpenAI model and returns the response."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"body"}),": Contains the request data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"__user__"}),": Contains user information (not used in this example but can be useful for authentication or logging)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Process"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prepare Headers"}),": Sets up the headers with the API key and content type."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extract Model ID"}),": Extracts the actual model ID from the selected model name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prepare Payload"}),": Updates the body with the correct model ID."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Make API Request"}),": Sends a POST request to the OpenAI API's chat completions endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle Streaming"}),": If ",(0,t.jsx)(n.code,{children:"stream"})," is ",(0,t.jsx)(n.code,{children:"True"}),", returns an iterable of lines."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Catches exceptions and returns an error message."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"extending-the-proxy-pipe",children:"Extending the Proxy Pipe"}),"\n",(0,t.jsxs)(n.p,{children:["You can modify this proxy Pipe to support additional service providers like Anthropic, Perplexity, and more by adjusting the API endpoints, headers, and logic within the ",(0,t.jsx)(n.code,{children:"pipes"})," and ",(0,t.jsx)(n.code,{children:"pipe"})," functions."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"using-internal-open-tutorai-functions",children:"Using Internal Open TutorAI Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, you may want to leverage the internal functions of Open TutorAI within your Pipe. You can import these functions directly from the ",(0,t.jsx)(n.code,{children:"open_webui"})," package. Keep in mind that while unlikely, internal functions may change for optimization purposes, so always refer to the latest documentation."]}),"\n",(0,t.jsx)(n.p,{children:"Here's how you can use internal Open TutorAI functions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, Field\nfrom fastapi import Request\n\nfrom open_webui.models.users import Users\nfrom open_webui.utils.chat import generate_chat_completion\n\nclass Pipe:\n    def __init__(self):\n        pass\n\n    async def pipe(\n        self,\n        body: dict,\n        __user__: dict,\n        __request__: Request,\n    ) -> str:\n        # Use the unified endpoint with the updated signature\n        user = Users.get_user_by_id(__user__["id"])\n        body["model"] = "llama3.2:latest"\n        return await generate_chat_completion(__request__, body, user)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"explanation-1",children:"Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Imports"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Users"})," from ",(0,t.jsx)(n.code,{children:"open_webui.models.users"}),": To fetch user information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"generate_chat_completion"})," from ",(0,t.jsx)(n.code,{children:"open_webui.utils.chat"}),": To generate chat completions using internal logic."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Asynchronous ",(0,t.jsx)(n.code,{children:"pipe"})," Function"]}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"body"}),": Input data for the model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"__user__"}),": Dictionary containing user information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"__request__"}),": The request object from FastAPI (required by ",(0,t.jsx)(n.code,{children:"generate_chat_completion"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Process"}),":","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fetch User Object"}),": Retrieves the user object using their ID."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set Model"}),": Specifies the model to be used."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generate Completion"}),": Calls ",(0,t.jsx)(n.code,{children:"generate_chat_completion"})," to process the input and produce an output."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"important-notes",children:"Important Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Function Signatures"}),": Refer to the latest Open TutorAI codebase or documentation for the most accurate function signatures and parameters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Best Practices"}),": Always handle exceptions and errors gracefully to ensure a smooth user experience."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"frequently-asked-questions",children:"Frequently Asked Questions"}),"\n",(0,t.jsx)(n.h3,{id:"q1-why-should-i-use-pipes-in-open-tutorai",children:"Q1: Why should I use Pipes in Open TutorAI?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),': Pipes allow you to add new "model" with custom logic and processing to Open TutorAI. It\'s a flexible plugin system that lets you integrate external APIs, customize model behaviors, and create innovative features without altering the core codebase.']}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q2-what-are-valves-and-why-are-they-important",children:"Q2: What are Valves, and why are they important?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Valves are the configurable parameters of your Pipe. They function like settings or controls that determine how your Pipe operates. By adjusting Valves, you can change the behavior of your Pipe without modifying the underlying code."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q3-can-i-create-a-pipe-without-valves",children:"Q3: Can I create a Pipe without Valves?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Yes, you can create a simple Pipe without defining a Valves class if your Pipe doesn't require any persistent configuration options. However, including Valves is a good practice for flexibility and future scalability."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q4-how-do-i-ensure-my-pipe-is-secure-when-using-api-keys",children:"Q4: How do I ensure my Pipe is secure when using API keys?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Never hard-code sensitive information like API keys into your Pipe. Instead, use Valves to input and store API keys securely. Ensure that your code handles these keys appropriately and avoids logging or exposing them."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"q5-what-is-the-difference-between-the-pipe-and-pipes-functions",children:["Q5: What is the difference between the ",(0,t.jsx)(n.code,{children:"pipe"})," and ",(0,t.jsx)(n.code,{children:"pipes"})," functions?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"pipe"})," Function"]}),": The primary function where you process the input data and generate an output. It handles the logic for a single model."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"pipes"})," Function"]}),": Allows your Pipe to represent multiple models by returning a list of model definitions. Each model will appear individually in Open TutorAI."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q6-how-can-i-handle-errors-in-my-pipe",children:"Q6: How can I handle errors in my Pipe?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Use try-except blocks within your ",(0,t.jsx)(n.code,{children:"pipe"})," and ",(0,t.jsx)(n.code,{children:"pipes"})," functions to catch exceptions. Return meaningful error messages or handle the errors gracefully to ensure the user is informed about what went wrong."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q7-can-i-use-external-libraries-in-my-pipe",children:"Q7: Can I use external libraries in my Pipe?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Yes, you can import and use external libraries as needed. Ensure that any dependencies are properly installed and managed within your environment."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q8-how-do-i-test-my-pipe",children:"Q8: How do I test my Pipe?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Test your Pipe by running Open TutorAI in a development environment and selecting your custom model from the interface. Validate that your Pipe behaves as expected with various inputs and configurations."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q9-are-there-any-best-practices-for-organizing-my-pipes-code",children:"Q9: Are there any best practices for organizing my Pipe's code?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Yes, follow these guidelines:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Keep ",(0,t.jsx)(n.code,{children:"Valves"})," at the top of your ",(0,t.jsx)(n.code,{children:"Pipe"})," class."]}),"\n",(0,t.jsxs)(n.li,{children:["Initialize variables in the ",(0,t.jsx)(n.code,{children:"__init__"})," method, primarily ",(0,t.jsx)(n.code,{children:"self.valves"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Place the ",(0,t.jsx)(n.code,{children:"pipe"})," function after the ",(0,t.jsx)(n.code,{children:"__init__"})," method."]}),"\n",(0,t.jsx)(n.li,{children:"Use clear and descriptive variable names."}),"\n",(0,t.jsx)(n.li,{children:"Comment your code for clarity."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"q10-where-can-i-find-the-latest-open-tutorai-documentation",children:"Q10: Where can I find the latest Open TutorAI documentation?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"A"}),": Visit the official Open TutorAI repository or documentation site for the most up-to-date information, including function signatures, examples, and migration guides if any changes occur."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"By now, you should have a thorough understanding of how to create and use Pipes in Open TutorAI. Pipes offer a powerful way to extend and customize the capabilities of Open TutorAI to suit your specific needs. Whether you're integrating external APIs, adding new models, or injecting complex logic, Pipes provide the flexibility to make it happen."}),"\n",(0,t.jsx)(n.p,{children:"Remember to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use clear and consistent structure"})," in your Pipe classes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Leverage Valves"})," for configurable options."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle errors gracefully"})," to improve the user experience."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consult the latest documentation"})," for any updates or changes."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Happy coding, and enjoy extending your Open TutorAI with Pipes!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);