"use strict";(self.webpackChunkotai_documentation=self.webpackChunkotai_documentation||[]).push([[2006],{3872:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tutorials/text-to-speech/Kokoro-FastAPI-integration","title":"\ud83d\udde8\ufe0f Kokoro-FastAPI Using Docker","description":"This tutorial is a community contribution and is not supported by the Open WebUI team. It serves only as a demonstration on how to customize Open WebUI for your specific use case. Want to contribute? Check out the contributing tutorial.","source":"@site/docs/tutorials/text-to-speech/Kokoro-FastAPI-integration.md","sourceDirName":"tutorials/text-to-speech","slug":"/tutorials/text-to-speech/Kokoro-FastAPI-integration","permalink":"/open-tutor-ai-docs/docs/tutorials/text-to-speech/Kokoro-FastAPI-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/pr-elhajji/open-tutor-ai-CE/docs/tutorials/text-to-speech/Kokoro-FastAPI-integration.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"\ud83d\udde8\ufe0f Kokoro-FastAPI Using Docker"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udde8\ufe0f Edge TTS Using Docker","permalink":"/open-tutor-ai-docs/docs/tutorials/text-to-speech/openai-edge-tts-integration"},"next":{"title":"\ud83d\udde8\ufe0f Openedai-speech Using Docker","permalink":"/open-tutor-ai-docs/docs/tutorials/text-to-speech/openedai-speech-integration"}}');var t=o(4848),s=o(8453);const r={sidebar_position:2,title:"\ud83d\udde8\ufe0f Kokoro-FastAPI Using Docker"},c=void 0,a={},l=[{value:"What is <code>Kokoro-FastAPI</code>?",id:"what-is-kokoro-fastapi",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Voices",id:"voices",level:2},{value:"Languages",id:"languages",level:2},{value:"Requirements",id:"requirements",level:2},{value:"\u26a1\ufe0f Quick start",id:"\ufe0f-quick-start",level:2},{value:"You can choose between GPU or CPU versions",id:"you-can-choose-between-gpu-or-cpu-versions",level:3},{value:"GPU Version (Requires NVIDIA GPU with CUDA 12.1)",id:"gpu-version-requires-nvidia-gpu-with-cuda-121",level:3},{value:"CPU Version (ONNX optimized inference)",id:"cpu-version-onnx-optimized-inference",level:3},{value:"Setting up Open WebUI to use <code>Kokoro-FastAPI</code>",id:"setting-up-open-webui-to-use-kokoro-fastapi",level:2},{value:"Building the Docker Container",id:"building-the-docker-container",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"This tutorial is a community contribution and is not supported by the Open WebUI team. It serves only as a demonstration on how to customize Open WebUI for your specific use case. Want to contribute? Check out the contributing tutorial."})}),"\n",(0,t.jsxs)(n.h2,{id:"what-is-kokoro-fastapi",children:["What is ",(0,t.jsx)(n.code,{children:"Kokoro-FastAPI"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/remsky/Kokoro-FastAPI",children:"Kokoro-FastAPI"})," is a dockerized FastAPI wrapper for the ",(0,t.jsx)(n.a,{href:"https://huggingface.co/hexgrad/Kokoro-82M",children:"Kokoro-82M"})," text-to-speech model that implements the OpenAI API endpoint specification. It offers high-performance text-to-speech with impressive generation speeds."]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OpenAI-compatible Speech endpoint with inline voice combination"}),"\n",(0,t.jsx)(n.li,{children:"NVIDIA GPU accelerated or CPU Onnx inference"}),"\n",(0,t.jsx)(n.li,{children:"Streaming support with variable chunking"}),"\n",(0,t.jsxs)(n.li,{children:["Multiple audio format support (",(0,t.jsx)(n.code,{children:".mp3"}),", ",(0,t.jsx)(n.code,{children:".wav"}),", ",(0,t.jsx)(n.code,{children:".opus"}),", ",(0,t.jsx)(n.code,{children:".flac"}),", ",(0,t.jsx)(n.code,{children:".aac"}),", ",(0,t.jsx)(n.code,{children:".pcm"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Integrated web interface on localhost:8880/web (or additional container in repo for gradio)"}),"\n",(0,t.jsx)(n.li,{children:"Phoneme endpoints for conversion and generation"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"voices",children:"Voices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"af"}),"\n",(0,t.jsx)(n.li,{children:"af_bella"}),"\n",(0,t.jsx)(n.li,{children:"af_irulan"}),"\n",(0,t.jsx)(n.li,{children:"af_nicole"}),"\n",(0,t.jsx)(n.li,{children:"af_sarah"}),"\n",(0,t.jsx)(n.li,{children:"af_sky"}),"\n",(0,t.jsx)(n.li,{children:"am_adam"}),"\n",(0,t.jsx)(n.li,{children:"am_michael"}),"\n",(0,t.jsx)(n.li,{children:"am_gurney"}),"\n",(0,t.jsx)(n.li,{children:"bf_emma"}),"\n",(0,t.jsx)(n.li,{children:"bf_isabella"}),"\n",(0,t.jsx)(n.li,{children:"bm_george"}),"\n",(0,t.jsx)(n.li,{children:"bm_lewis"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"languages",children:"Languages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"en_us"}),"\n",(0,t.jsx)(n.li,{children:"en_uk"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Docker installed on your system"}),"\n",(0,t.jsx)(n.li,{children:"Open WebUI running"}),"\n",(0,t.jsx)(n.li,{children:"For GPU support: NVIDIA GPU with CUDA 12.3"}),"\n",(0,t.jsx)(n.li,{children:"For CPU-only: No special requirements"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-quick-start",children:"\u26a1\ufe0f Quick start"}),"\n",(0,t.jsx)(n.h3,{id:"you-can-choose-between-gpu-or-cpu-versions",children:"You can choose between GPU or CPU versions"}),"\n",(0,t.jsx)(n.h3,{id:"gpu-version-requires-nvidia-gpu-with-cuda-121",children:"GPU Version (Requires NVIDIA GPU with CUDA 12.1)"}),"\n",(0,t.jsx)(n.p,{children:"Using docker run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run --gpus all -p 8880:8880 ghcr.io/remsky/kokoro-fastapi-gpu\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or docker compose, by creating a ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," file and running ",(0,t.jsx)(n.code,{children:"docker compose up"}),". For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: kokoro\nservices:\n    kokoro-fastapi-gpu:\n        ports:\n            - 8880:8880\n        image: ghcr.io/remsky/kokoro-fastapi-gpu:v0.2.1\n        restart: always\n        deploy:\n            resources:\n                reservations:\n                    devices:\n                        - driver: nvidia\n                          count: all\n                          capabilities:\n                              - gpu\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["You may need to install and configure ",(0,t.jsx)(n.a,{href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html",children:"the NVIDIA Container Toolkit"})]})}),"\n",(0,t.jsx)(n.h3,{id:"cpu-version-onnx-optimized-inference",children:"CPU Version (ONNX optimized inference)"}),"\n",(0,t.jsx)(n.p,{children:"With docker run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run -p 8880:8880 ghcr.io/remsky/kokoro-fastapi-cpu\n"})}),"\n",(0,t.jsx)(n.p,{children:"With docker compose:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: kokoro\nservices:\n    kokoro-fastapi-cpu:\n        ports:\n            - 8880:8880\n        image: ghcr.io/remsky/kokoro-fastapi-cpu\n        restart: always\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"setting-up-open-webui-to-use-kokoro-fastapi",children:["Setting up Open WebUI to use ",(0,t.jsx)(n.code,{children:"Kokoro-FastAPI"})]}),"\n",(0,t.jsx)(n.p,{children:"To use Kokoro-FastAPI with Open WebUI, follow these steps:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Open the Admin Panel and go to ",(0,t.jsx)(n.code,{children:"Settings"})," -> ",(0,t.jsx)(n.code,{children:"Audio"})]}),"\n",(0,t.jsx)(n.li,{children:"Set your TTS Settings to match the following:"}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Text-to-Speech Engine: OpenAI"}),"\n",(0,t.jsxs)(n.li,{children:["API Base URL: ",(0,t.jsx)(n.code,{children:"http://localhost:8880/v1"})," # you may need to use ",(0,t.jsx)(n.code,{children:"host.docker.internal"})," instead of ",(0,t.jsx)(n.code,{children:"localhost"})]}),"\n",(0,t.jsxs)(n.li,{children:["API Key: ",(0,t.jsx)(n.code,{children:"not-needed"})]}),"\n",(0,t.jsxs)(n.li,{children:["TTS Model: ",(0,t.jsx)(n.code,{children:"kokoro"})]}),"\n",(0,t.jsxs)(n.li,{children:["TTS Voice: ",(0,t.jsx)(n.code,{children:"af_bella"})," # also accepts mapping of existing OAI voices for compatibility"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The default API key is the string ",(0,t.jsx)(n.code,{children:"not-needed"}),". You do not have to change that value if you do not need the added security."]})}),"\n",(0,t.jsx)(n.h2,{id:"building-the-docker-container",children:"Building the Docker Container"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/remsky/Kokoro-FastAPI.git\ncd Kokoro-FastAPI\ncd docker/cpu # or docker/gpu\ndocker compose up --build\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"That's it!"})}),"\n",(0,t.jsxs)(n.p,{children:["For more information on building the Docker container, including changing ports, please refer to the ",(0,t.jsx)(n.a,{href:"https://github.com/remsky/Kokoro-FastAPI",children:"Kokoro-FastAPI"})," repository"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var i=o(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);