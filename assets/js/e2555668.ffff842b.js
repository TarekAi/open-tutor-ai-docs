"use strict";(self.webpackChunkotai_documentation=self.webpackChunkotai_documentation||[]).push([[6843],{7791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorials/https-haproxy","title":"\ud83d\udd12 HTTPS using HAProxy","description":"This tutorial is a community contribution and is not supported by the Open WebUI team. It serves only as a demonstration on how to customize Open WebUI for your specific use case. Want to contribute? Check out the contributing tutorial.","source":"@site/docs/tutorials/https-haproxy.md","sourceDirName":"tutorials","slug":"/tutorials/https-haproxy","permalink":"/open-tutor-ai-docs/docs/tutorials/https-haproxy","draft":false,"unlisted":false,"editUrl":"https://github.com/pr-elhajji/open-tutor-ai-CE/docs/tutorials/https-haproxy.md","tags":[],"version":"current","sidebarPosition":201,"frontMatter":{"sidebar_position":201,"title":"\ud83d\udd12 HTTPS using HAProxy"},"sidebar":"tutorialSidebar","previous":{"title":"SerpApi","permalink":"/open-tutor-ai-docs/docs/tutorials/web-search/serpapi"},"next":{"title":"\ud83d\udce6 Exporting and Importing Database","permalink":"/open-tutor-ai-docs/docs/tutorials/database"}}');var r=n(4848),i=n(8453);const a={sidebar_position:201,title:"\ud83d\udd12 HTTPS using HAProxy"},s="HAProxy Configuration for Open WebUI",c={},l=[{value:"Install HAProxy and Let&#39;s Encrypt",id:"install-haproxy-and-lets-encrypt",level:2},{value:"Redhat derivatives",id:"redhat-derivatives",level:3},{value:"Debian derivatives",id:"debian-derivatives",level:3},{value:"HAProxy Configuration Basics",id:"haproxy-configuration-basics",level:2},{value:"Issuing SSL Certificates with Let&#39;s Encrypt",id:"issuing-ssl-certificates-with-lets-encrypt",level:2},{value:"HAProxy Manager (Easy Deployment Option)",id:"haproxy-manager-easy-deployment-option",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"This tutorial is a community contribution and is not supported by the Open WebUI team. It serves only as a demonstration on how to customize Open WebUI for your specific use case. Want to contribute? Check out the contributing tutorial."})}),"\n",(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"haproxy-configuration-for-open-webui",children:"HAProxy Configuration for Open WebUI"})}),"\n",(0,r.jsxs)(t.p,{children:["HAProxy (High Availability Proxy) is specialized load-balancing and reverse proxy solution that is highly configurable and designed to handle large amounts of connections with a relatively low resource footprint. for more information, please see: ",(0,r.jsx)(t.a,{href:"https://www.haproxy.org/",children:"https://www.haproxy.org/"})]}),"\n",(0,r.jsx)(t.h2,{id:"install-haproxy-and-lets-encrypt",children:"Install HAProxy and Let's Encrypt"}),"\n",(0,r.jsx)(t.p,{children:"First, install HAProxy and Let's Encrypt's certbot:"}),"\n",(0,r.jsx)(t.h3,{id:"redhat-derivatives",children:"Redhat derivatives"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"sudo dnf install haproxy certbot openssl -y"})}),"\n",(0,r.jsx)(t.h3,{id:"debian-derivatives",children:"Debian derivatives"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"sudo apt install haproxy certbot openssl -y"})}),"\n",(0,r.jsx)(t.h2,{id:"haproxy-configuration-basics",children:"HAProxy Configuration Basics"}),"\n",(0,r.jsxs)(t.p,{children:["HAProxy's configuration is by default stored in ",(0,r.jsx)(t.code,{children:"/etc/haproxy/haproxy.cfg"}),". This file contains all the configuration directives that determine how HAProxy will operate."]}),"\n",(0,r.jsx)(t.p,{children:"The base configuration for HAProxy to work with Open WebUI is pretty simple."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:" #---------------------------------------------------------------------\n# Global settings\n#---------------------------------------------------------------------\nglobal\n    # to have these messages end up in /var/log/haproxy.log you will\n    # need to:\n    #\n    # 1) configure syslog to accept network log events.  This is done\n    #    by adding the '-r' option to the SYSLOGD_OPTIONS in\n    #    /etc/sysconfig/syslog\n    #\n    # 2) configure local2 events to go to the /var/log/haproxy.log\n    #   file. A line like the following can be added to\n    #   /etc/sysconfig/syslog\n    #\n    #    local2.*                       /var/log/haproxy.log\n    #\n    log         127.0.0.1 local2\n\n    chroot      /var/lib/haproxy\n    pidfile     /var/run/haproxy.pid\n    maxconn     4000\n    user        haproxy\n    group       haproxy\n    daemon\n\t\n\t#adjust the dh-param if too low\n    tune.ssl.default-dh-param 2048\n#---------------------------------------------------------------------\n# common defaults that all the 'listen' and 'backend' sections will\n# use if not designated in their block\n#---------------------------------------------------------------------\ndefaults\n    mode                    http\n    log                     global\n    option                  httplog\n    option                  dontlognull\n    option http-server-close\n    option forwardfor       #except 127.0.0.0/8\n    option                  redispatch\n    retries                 3\n    timeout http-request    300s\n    timeout queue           2m\n    timeout connect         120s\n    timeout client          10m\n    timeout server          10m\n    timeout http-keep-alive 120s\n    timeout check           10s\n    maxconn                 3000\n\n#http\nfrontend web\n\t#Non-SSL\n    bind 0.0.0.0:80\n\t#SSL/TLS\n\tbind 0.0.0.0:443 ssl crt /path/to/ssl/folder/\n\n    #Let's Encrypt SSL\n    acl letsencrypt-acl path_beg /.well-known/acme-challenge/\n    use_backend letsencrypt-backend if letsencrypt-acl\n\n\t#Subdomain method\n    acl chat-acl hdr(host) -i subdomain.domain.tld\n    #Path Method\n    acl chat-acl path_beg /owui/\n    use_backend owui_chat if chat-acl\n\n#Pass SSL Requests to Lets Encrypt\nbackend letsencrypt-backend\n    server letsencrypt 127.0.0.1:8688\n    \n#OWUI Chat\nbackend owui_chat\n    # add X-FORWARDED-FOR\n    option forwardfor\n    # add X-CLIENT-IP\n    http-request add-header X-CLIENT-IP %[src]\n\thttp-request set-header X-Forwarded-Proto https if { ssl_fc }\n    server chat <ip>:3000\n"})}),"\n",(0,r.jsx)(t.p,{children:"You will see that we have ACL records (routers) for both Open WebUI and Let's Encrypt.  To use WebSocket with OWUI, you need to have an SSL configured, and the easiest way to do that is to use Let's Encrypt."}),"\n",(0,r.jsx)(t.p,{children:"You can use either the subdomain method or the path method for routing traffic to Open WebUI. The subdomain method requires a dedicated subdomain (e.g., chat.yourdomain.com), while the path method allows you to access Open WebUI through a specific path on your domain (e.g., yourdomain.com/owui/). Choose the method that best suits your needs and update the configuration accordingly."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"You will need to expose port 80 and 443 to your HAProxy server. These ports are required for Let's Encrypt to validate your domain and for HTTPS traffic. You will also need to ensure your DNS records are properly configured to point to your HAProxy server. If you are running HAProxy at home, you will need to use port forwarding in your router to forward ports 80 and 443 to your HAProxy server."})}),"\n",(0,r.jsx)(t.h2,{id:"issuing-ssl-certificates-with-lets-encrypt",children:"Issuing SSL Certificates with Let's Encrypt"}),"\n",(0,r.jsx)(t.p,{children:"Before starting HAProxy, you will want to generate a self signed certificate to use as a placeholder until Let's Encrypt issues a proper one. Here's how to generate a self-signed certificate:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'openssl req -x509 -newkey rsa:2048 -keyout /tmp/haproxy.key -out /tmp/haproxy.crt -days 3650 -nodes -subj "/CN=localhost"\n'})}),"\n",(0,r.jsx)(t.p,{children:"Then combine the key and certificate into a PEM file that HAProxy can use:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"cat /tmp/haproxy.crt /tmp/haproxy.key > /etc/haproxy/certs/haproxy.pem"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"Make sure you update the HAProxy configuration based on your needs and configuration."})}),"\n",(0,r.jsx)(t.p,{children:"Once you have your HAProxy configuration set up, you can use certbot to obtain and manage your SSL certificates. Certbot will handle the validation process with Let's Encrypt and automatically update your certificates when they are close to expiring (assuming you use the certbot auto-renewal service)."}),"\n",(0,r.jsxs)(t.p,{children:["You can validate the HAProxy configuration by running ",(0,r.jsx)(t.code,{children:"haproxy -c -f /etc/haproxy/haproxy.cfg"}),". If there are no errors, you can start HAProxy with ",(0,r.jsx)(t.code,{children:"systemctl start haproxy"})," and verify it's running with ",(0,r.jsx)(t.code,{children:"systemctl status haproxy"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["To ensure HAProxy starts with the system, ",(0,r.jsx)(t.code,{children:"systemctl enable haproxy"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"When you have HAProxy configured, you can use Let's encrypt to issue your valid SSL certificate.\nFirst, you will need to register with Let's Encrypt.  You should only need to do this one time:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"certbot register --agree-tos --email your@email.com --non-interactive"})}),"\n",(0,r.jsx)(t.p,{children:"Then you can request your certificate:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"certbot certonly -n --standalone --preferred-challenges http --http-01-port-8688 -d yourdomain.com\n"})}),"\n",(0,r.jsx)(t.p,{children:"Once the certificate is issued, you will need to merge the certificate and private key files into a single PEM file that HAProxy can use."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"cat /etc/letsencrypt/live/{domain}/fullchain.pem /etc/letsencrypt/live/{domain}/privkey.pem > /etc/haproxy/certs/{domain}.pem\nchmod 600 /etc/haproxy/certs/{domain}.pem\nchown haproxy:haproxy /etc/haproxy/certs/{domain}.pem\n"})}),"\n",(0,r.jsxs)(t.p,{children:["You can then restart HAProxy to apply the new certificate:\n",(0,r.jsx)(t.code,{children:"systemctl restart haproxy"})]}),"\n",(0,r.jsx)(t.h2,{id:"haproxy-manager-easy-deployment-option",children:"HAProxy Manager (Easy Deployment Option)"}),"\n",(0,r.jsx)(t.p,{children:"If you would like to have something manage your HAProxy configuration and Let's Encrypt SSLs automatically, I have written a simple python script and created a docker container you can use to create and manage your HAProxy config and manage the Let's Encrypt certificate lifecycle."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/shadowdao/haproxy-manager",children:"https://github.com/shadowdao/haproxy-manager"})}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"Please do not expose port 8000 publicly if you use the script or container!"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(6540);const r={},i=o.createContext(r);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);